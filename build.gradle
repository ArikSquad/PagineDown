plugins {
    id 'org.cadixdev.licenser' version '0.6.1'
    id 'org.ajoberstar.grgit' version '5.2.1'
    id 'maven-publish'
    id 'java'
}


group 'net.william278'
version "1.1.3${versionMetadata()}"
defaultTasks 'licenseFormat', 'build'

repositories {
    mavenCentral()
    maven { url 'https://repo.william278.net/releases/' }
}

dependencies {
    compileOnly 'net.kyori:adventure-api:4.21.0'
    compileOnly "net.kyori:adventure-text-minimessage:4.21.0"
    compileOnly "net.kyori:adventure-text-serializer-plain:4.21.0"
    compileOnly 'org.jetbrains:annotations:24.1.0'

    testImplementation 'net.kyori:adventure-api:4.21.0'
    testImplementation 'net.kyori:adventure-platform-bukkit:4.3.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.2'
}

logger.lifecycle("Building PagineDown ${version} by William278")
version rootProject.version
archivesBaseName = "${rootProject.name}"

tasks {
    compileJava {
        options.encoding = 'UTF-8'
        options.release.set(11)
    }
    jar {
        manifest {
            attributes('Automatic-Module-Name': 'net.william278.paginedown')
        }
    }
}


license {
    header = rootProject.file('HEADER')
    include '**/*.java'
    newLine = true
}

javadoc {
    options.encoding = 'UTF-8'
    options.addStringOption('Xdoclint:none', '-quiet')
}

java {
    withSourcesJar()
    withJavadocJar()
}

jar.dependsOn(sourcesJar)
jar.dependsOn(javadocJar)

test {
    useJUnitPlatform()
}

publishing {
    repositories {
        maven {
            name = 'mikart'
            url = uri('https://maven.mikart.eu/snapshots')
            credentials {
                username = System.getenv('MIKART_MAVEN_USER')
                password = System.getenv('MIKART_MAVEN_PASSWORD')
            }
            authentication {
                basic(BasicAuthentication)
            }
        }
    }

    publications {
        mavenJava(MavenPublication) {
            from components.java

            groupId = 'net.william278'
            artifactId = 'paginedown'
            version = "$rootProject.version"
        }
    }
}

@SuppressWarnings('GrMethodMayBeStatic')
def versionMetadata() {
    // Get if there is a tag for this commit
    def tag = grgit.tag.list().find { it.commit.id == grgit.head().id }
    if (tag != null) {
        return ''
    }

    // Otherwise, get the last commit hash and if it's a clean head
    if (grgit == null) {
        return '-' + System.getenv("GITHUB_RUN_NUMBER") ? 'build.' + System.getenv("GITHUB_RUN_NUMBER") : 'unknown'
    }
    return '-' + grgit.head().abbreviatedId + (grgit.status().clean ? '' : '-indev')
}